---

name: Конкатенация
theory: |

  Мы уже знаем о математической операции сложения. Такая программа:

  ```python
  print(5 + 3)
  ```

  выведет на экран `8` — результат работы бинарного оператора `+` с операндами `5` и `3`.

  У строк есть свои операции. Можно «сложить» две строки. Такая программа:

  ```python
  print('Dragon' + 'stone')
  ```

  выведет на экран `Dragonstone` — результат работы бинарного оператора `.` с операндами 'Dragon' и 'stone'.

  Эта операция называется **конкатенацией**. Грубо говоря, это «склеивание» строк. Склеивание всегда происходит в том же порядке, в котором записаны операнды, другими словами, левый операнд становится левой частью строки, а правый — правой.

  Вот еще несколько примеров:

  ```python
  print('Kings' + 'wood')      # => Kingswood

  print('Kings' + 'road')      # => Kingsroad

  print("King's" + 'Landing')  # => King'sLanding
  ```

  Как видите, строки можно склеивать, даже если они записаны с разными кавычками.

  В последнем примере название города получилось с ошибкой: *King's Landing* нужно писать через пробел! Но в наших начальных строках не было пробелов, а пробелы в самом коде слева и справа от символа `+` не имеют значения, потому что они не являются частью строк.

  Попробуем решить эту проблему разными способами:

  ```python
  // Ставим пробел в левой части
  print("King's " + 'Landing')  # => King's Landing

  // Ставим пробел в правой части
  print("King's" + ' Landing')  # => King's Landing
  ```

  Чем больше пробелов, тем шире отступы:

  ```python
  print("King's " + ' Landing')    # => Kings  Landing

  print("King's  " + '  Landing')  # => Kings    Landing
  ```

instructions: |

  Выведите на экран

  ```
  Winter came for the House of Frey.
  ```

  используя конкатенацию слов.

definitions:
  - name: "Конкатенация"
    description: |
      операция соединения двух строк. Например, `print("King's " + ' Landing')`
