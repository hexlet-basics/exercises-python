---

name: Конкатенация
theory: |

  В веб-разработке программы постоянно оперируют строками. Всё, что мы видим на сайтах, так или иначе представлено в виде текста. Этот текст чаще всего динамический, то есть полученный из разных частей, которые соединяются вместе. Операция соединения строк в программировании называется **конкатенацией**.

  ```python
  # Оператор такой же, как и при сложении чисел
  # но здесь он имеет другой смысл (семантику)
  print('Hearth' + 'stone')
  # => 'Hearthstone'
  ```

  Склеивание строк всегда происходит в том же порядке, в котором записаны операнды. Левый операнд становится левой частью строки, а правый — правой.

  Вот еще несколько примеров:

  ```python
  print('Holly' + 'wood')      # => Hollywood

  # Обратный порядок слов
  print('road' + 'President')      # => roadPresident

  # Конкатенировать можно абсолютно любые строки
  print("Washington," + 'D.C.')  # =>  Washington,D.C.
  ```

  Как видите, строки можно склеивать, даже если они записаны с разными кавычками.

  В последнем примере название города получилось с ошибкой: *Washington, D.C.* нужно писать через пробел! Но в наших начальных строках не было пробелов, а пробелы в самом коде слева и справа от символа `+` не имеют значения, потому что они не являются частью строк.

  Попробуем решить эту проблему разными способами:

  ```python
  # Оба способа равнозначны

  # Ставим пробел в левой части
  print("Washington, " + 'D.C.')  # => Washington, D.C.
  # Ставим пробел в правой части
  print("Washington," + ' D.C.')  # => Washington, D.C.
  ```

  Пробел — такой же символ, как и другие. Чем больше пробелов, тем шире отступы:

  ```python
  print("Washington, " + ' D.C.')    # => King's  Landing

  print("Washington,  " + '  D.C.')  # => King's    Landing
  ```

instructions: |

  Выведите на экран

  ```
  Coding has over 700 languages.
  ```

  используя конкатенацию слов.

definitions:
  - name: Конкатенация
    description: |
      операция соединения двух строк. Например, `print("Washington, " + ' D.C.')`
