---

name: Интерполяция
theory: |

  Базовый способ соединения строк - конкатенация. С ее помощью строки "суммируются" друг с другом, как в примере ниже:

  ```python
  first_name = 'Joffrey'
  greeting = 'Hello'

  print(greeting + ", " + first_name + "!")
  # => 'Hello, Joffrey!'
  ```

  Конкатенция работает просто, но выглядит не всегда наглядно. Из-за использования кавычек сложно разглядет то, каким будет конечный результат. И чем сложнее устроена строка, тем запутаннее она начнет выглядеть. У конкатенации есть альтернатива - **Интерполяция**. Вот, как это выглядит:

  ```python
  first_name = 'Joffrey'
  greeting = 'Hello'

  print(f'{greeting}, {first_name}!')
  # => 'Hello, Joffrey!'
  ```

  Буква `f` указывает на то, что мы создаём f-строку. f-строка это шаблон, в который с помощью фигурных скобок подставляются значения переменных. На выходе получается обычная строка. Еще пример:

  ```python
  school = 'Hexlet'

  whatIsIt = f'{school} - online courses'
  print(whatIsIt) # => 'Hexlet - online courses'
  ```

  Почти во всех языках интерполяция предпочтительнее конкатенации для объединения строк. Строка при этом получается склеенная, и внутри неё хорошо просматриваются пробелы и другие символы.

instructions: |

  Выведите на экран строку `Do you want to eat, <name>?`. Где вместо `<name>` должна использоваться переменная `stark`. Вывод должен получиться таким:

  <pre class='hexlet-basics-output'>
  Do you want to eat, Arya?
  </pre>

tips: []

definitions:
  - name: Интерполяция
    description: способ получения сложной строки из нескольких простых с использованием специальных шаблонов
