---

name: Передача одного аргумента
theory: |

  Функции без аргументов встречаются редко. Чаще функции принимают на вход данные, как-то их используют и выдают результат обратно. В этом уроке мы познакомимся с определением функций, принимающих на вход один аргумент. Посмотрите на определение ниже:

  ```python
  def show_date(text):
      print("Today is: " + text)

  show_date('January 29')
  ```

  <pre class='hexlet-basics-output'>Today is: January 29</pre>

  Вот иллюстрация того, как аргумент из вызова попадает в тело функции и используется там:

  ![](https://i.imgur.com/ehPcKdt.png)

  Теперь понятно, зачем нужны были круглые скобки после имени функции: в них *можно* указать аргументы. Теперь наша функция принимает один аргумент — `text`.

  Заметьте: мы не создаём переменную `text`, но используем её в теле функции. Python работает так: переменная сама создаётся при вызове и указанное значение (в нашем примере — `'January 29'`)  записывается в эту переменную.

  Аргументы можно называть как угодно, их имена имеют смысл исключительно в теле функции. Например, если изменить имя аргумента так:

  ```python
  def show_date(lala):
      print('Today is: ' + lala)

  bla = 'January 29'
  show_date(bla)
  ```

  то поведение функции не изменится. Это касается как имён внутри функции (`lala`), так и снаружи (`bla`). Но такое бессмысленное имя для аргумента — плохая практика.

  Новички иногда пытаются сделать примерно такое определение функции:

  ```python
  def show_date('Today is: December 5'):
      # какой-нибудь код
  ```

  Запустить код не получится — он содержит синтаксическую ошибку. Вместо переменной в аргументе написана строка, то есть значение.

  **Аргумент должен быть переменной**, иначе он не сможет быть аргументом, то есть чем-то, что *принимает значение при вызове*.

  Если же вам нужна какая-то информация в функции, и вы заранее знаете какая именно, то аргумент для этого не нужен, ведь мы уже умеем сохранять значения для последующего использования —  достаточно создать переменную в самом теле:

  ```python
  def show_date():
      text = 'Today is: December 5'
      # какой-нибудь код
  ```

instructions: |

  Реализуйте функцию `print_jaimes_line()`, которая принимает один аргумент — строку, и выводит реплику на экран в формате `JAIME: переданная_строка`.

  Как назвать переменную, которая будет аргументом — решайте сами.

  Наша система содержит код, скрытый от вас. В этом упражнении скрыт вызов функции `print_jaimes_line()`. Так мы проверяем ваше решение.

  Вам не нужно самостоятельно вызывать функцию, только **определить её**. Вот как **наша система** будет вызывать её:

  ```python
  print_jaimes_line("Farewell, my friend...")
  ```

  <pre class='hexlet-basics-output'>JAIME:  Farewell, my friend...</pre>

  Повторяю, не торопитесь выводить это сообщение самостоятельно, иначе ваша программа не пройдёт тесты! Только **объявите** функцию!

tips: []
