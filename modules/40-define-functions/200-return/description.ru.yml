---

name: Возврат значений
theory: |

  Функции в Python становятся по настоящему полезными, когда они начинают возвращать данные, вместо печати их на экран. Тогда мы можем их использовать для дальнейших вычислений. Посмотрите на пример:

  ```python
  message = greet_hexlet()
  print(message)
  ```

  Мы присваиваем переменной `message` результат работы функции. Для работы такого кода, функция должна внутри себя использовать инструкцию `return`:

  ```python
  def greet_hexlet():
      message = 'Hello, Hexlet!'
      return message
  ```

  `return` особая инструкция, которая берет выражение записанное справа и отдает его наружу, тому коду, который вызвал функцию. Само выполнение функции на этом завершается, любой код после `return` не выполняется:

  ```python
  def greet_hexlet():
      message = 'Hello, Hexlet!'
      return message
      print('Я никогда не выполнюсь')
  ```

  Для возврата не обязательно использовать переменную. Так как `return` работает с выражениями, то справа от него может появиться почти все что угодно. Здесь нужно руководствоваться принципами читаемости кода:

  ```python
  def greet_hexlet():
      return 'Hello, Hexlet!'
  ```

  И пример с вычислением:

  ```python
  def double_five():
      return 5 + 5
  ```

  Но даже если внутри функции не прописана инструкция `return`, возврат у функции все равно есть. По умолчанию любая функция возвращает `None`. Например это делает функция `print()`, которая печатает текст на экран, но ничего не возвращает. В таком случае возврат равен `None`. Это специальное значение, которое обозначает "отсутствие". В других языках его роль обычно выполняет значение `null`.

  ```python
  result = print('Сюда можно поместить любой текст')
  print(result) 
  # => None

  # Или еще проще, без создания промежуточной переменной
  print(print('Wow')) 
  # => Wow
  # => None
  ```

  Зачем нужно такое поведение? Вызов функции - выражение, а выражение всегда должно возвращать результат, иначе в коде все время возникали ошибки, в тех случаях, когда возвращаемых данных нет.

  Вопрос на самопроверку. Что выведет этот код?

  ```python
  # Определение
  def run():
      return 5
      return 10

  # Использование
  run() 
  # => ?
  ```

instructions: |

  Реализуйте функцию, которая возвращает случайное число от 0 до 10

  ```python
  get_random_number() # 1
  get_random_number() # 9
  ```

  Для выполнения этого задания, вам понадобятся:

  Функция `random()`, которая возвращает числа в диапазоне от 0.0 до 1.0

  ```python
  random() # 0.2320000789855705
  ```

  Функция [round()](https://docs.python.org/3/library/functions.html#round), которая округляет переданное ей значение

  ```python
  round(2.320000789855705) # 2
  ```

# tips: []

