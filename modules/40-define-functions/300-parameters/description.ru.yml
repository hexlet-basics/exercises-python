---

name: Параметры функций
theory: |

  Функции могут не только возвращать значения, но и принимать их в виде параметров. С параметрами функций мы уже сталкивались много раз:

  ```python
  # Принимает на вход один параметр любого типа
  print('я параметр')
  # Принимает на вход два строковых параметра
  # первый - что ищем, второй - на что меняем
  'google'.replace('go', 'mo'); // 'moogle'
  # Принимает на вход два числовых параметра
  # первый - округляемое число, второй - число знаков после запятой, которые нужно оставить
  round(10.23456, 3); // 10.235
  ```

  В этом уроке, мы научимся создавать функции, которые принимают на вход параметры. Представим, что перед нами стоит задача – реализовать функцию `get_last_char()`, возвращающую последний символ в строке, переданной ему на вход как параметр. Вот как будет выглядеть использование этой функции:

  ```python
  # Передача параметров напрямую без переменных
  get_last_char("Hexlet") # 't'
  # Передача параметров через переменные
  name1 = 'Hexlet'
  get_last_char(name1) # 't'
  name2 = 'Goo'
  get_last_char(name2) # 'o'
  ```

  Из описания и примеров кода мы можем сделать следующие выводы:

  * Нам нужно определить функцию `get_last_char()`
  * Функция должна принимать на вход один параметр строкового типа
  * Функция должна возвращать значение строкового типа

  Определение функции:

  ```python
  def get_last_char(str):
      # Вычисляем индекс последнего символа как длина строки - 1
      # или return str[-1]
      return str[len(str) - 1]
  ```

  Разберем его. В скобках указывается имя параметра (`str`). Так как внутри функции мы не знаем, с каким конкретно значением идет работа, то параметры всегда описываются как переменные. Имя параметра может быть любым, оно не связано с тем, как вызывается функция. Главное, чтобы это имя отражало смысл того значения, которое содержится внутри. Конкретное значение параметра будет зависеть от вызова этой функции.

  Этот параметр является обязательным. Если попробовать вызвать функцию без параметра, то интерпретатор выдаст ошибку:

  ```sh
  get_last_char(); # такой код не имеет смысла

  TypeError: get_last_char() missing 1 required positional argument: 'str'
  ```

  Точно таким же образом можно указывать два, три и более параметров. Каждый параметр отделяется от другого запятой.

  ```python
  # функция по нахождению среднего числа
  def average(a, b):
      return (a + b) / 2

  average(1, 5) # 3
  average(1, 2) # 1.5
  ```

instructions: |

  Реализуйте функцию `truncate()`, которая обрезает переданную строку до указанного количества символов, добавляет в конце троеточие и возвращает получившуюся строку. Подобная логика часто используется на сайтах, чтобы отобразить длинный текст в сокращенном виде. Функция принимает два параметра:

  1. Строка, которую нужно обрезать
  2. Число символов, которые нужно оставить

  Пример того, как должна работать написанная вами функция:

  ```python
  # Передаём текст напрямую
  # Обрезаем текст, оставляя 2 символа
  truncate('hexlet', 2) # 'he...'

  # Через переменную
  text = 'it works!'
  # Обрезаем текст, оставляя 4 символа
  truncate(text, 4) # 'it w...'
  ```

  Реализовать эту функцию можно различными способами, подскажем лишь один из них. Для решения этим способом вам понадобится взять подстроку из строки, переданной первым параметром в функцию. Используйте для этого срезы строк. Подумайте, исходя из задания, с какого индекса и по какой вам надо извлечь подстроку?

    ```python
    word = 'welcome'
    word[2:5] # 'lco'
    ```

  С точки зрения проверочной системы не имеет значения, каким из способов будет реализована функция `truncate()` внутри, главное – чтобы она выполняла поставленную задачу

# tips:
#   - |
#     Чтобы указать в аргументах метода printSeq() целое число, используйте тип данных `int`.
