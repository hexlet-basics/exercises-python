---

name: Необязательные параметры функций
theory: |

  В программировании большое количество функций и методов имеют параметры, которые редко меняются. В таких случаях этим параметрам задают значения по умолчанию, которые можно поменять по необходимости. Этим немного сокращается количество одинакового кода. Пример:

  ```python
  # Функция возведения в степень
  # Второй параметр имеет значение по умолчанию 2
  def pow(x, base=2):
      return x ** base

  # 3 во второй степени (двойка задана по умолчанию)
  pow(3) # 3 * 3 = 9
  # три в третьей степени
  pow(3, 3) # 3 * 3 * 3 = 27
  ```

  Значение по умолчанию выглядит как обычное присваивание в определении. Оно срабатывает только в том случае, если параметр не передан. К этому нужно привыкнуть. Значение по умолчанию может быть даже в том случае, когда параметр один:

  ```python
  def my_print(text='nothing'):
    print(text)

  my_print() # => nothing
  my_print('Hexlet') # => Hexlet
  ```

  Параметром, со значениями по умолчанию, может быть сколько угодно:

  ```python
  def f(a=5, b=10, c=100):
  ```

  У значений по умолчанию есть одно ограничение. Они должны идти в самом конце списка параметров. То есть, с точки зрения синтаксиса, невозможно создать функцию, у которой после необязательного параметра идет обязательный:

  ```python
  # Такой код завершится с ошибкой
  def f(a=5, b=10, c=100, x):
  # И такой
  def f(a=5, b=10, x, c=100):

  # А вот такой сработает
  def f(x, a=5, b=10, c=100):

  # И такой
  def f(x, y, a=5, b=10, c=100):
  ```

instructions: |

  Реализуйте функцию `get_hidden_card()`, который принимает на вход номер кредитки (состоящий из 16 цифр) в виде строки и возвращает его скрытую версию, которая может использоваться на сайте для отображения. Если исходная карта имела номер *2034399002125581*,  то скрытая версия выглядит так *\*\*\*\*5581*. Другими словами, функция заменяет первые 12 символов, на звездочки. Количество звездочек регулируется вторым необязательным параметром. Значение по умолчанию — 4.

  ```python
  # Кредитка передается внутрь как строка
  # Второй параметр не передается, значит звездочек будет 4
  get_hidden_card('1234567812345678') # ****5678

  get_hidden_card('1234567812345678', 2) # **5678
  get_hidden_card('1234567812345678', 3) # ***5678

  # Или используя переменные

  card_number = '2034399002121100'
  get_hidden_card(card_number) # ****1100
  get_hidden_card(card_number, 1) # *1100
  ```

  Для выполнения задания вам понадобится механизм повторения строк, который повторяет строку указанное количество раз. Для этого достаточно умножить строку на число повторений:

  ```python
  '+' * 5 # +++++
  'o' * 3 # ooo
  ```
