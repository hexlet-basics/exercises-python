---

name: Логический тип
theory: |

  Кроме арифметических операций, со школы нам известны операции сравнения. Например, `5 > 4`. Это звучит как вопрос: «5 больше 4?». В данном случае ответ «да». В других случаях ответом может быть «нет» (например, для `3 < 1`).

  Список операций сравнения:

  * `<`  — меньше
  * `<=` — меньше или равно
  * `>`  — больше
  * `>=` — больше или равно
  * `==` — равно
  * `!=` — не равно

  Эти операции применимы не только к числам. Например, с помощью оператора равенства можно сравнить строки:
  `password == text` — это сравнение идентичности строк, записанных в разных переменных.

  Логическая операция типа `5 > 4` или `password == text` — это выражение, и его результат — специальное значение `True` («истина») или `False` («ложь»). Это новый для нас тип данных — `bool`.

  Наряду со строками (`str`) и целыми и рациональными числами, **тип `bool` (булев) — это один из примитивных типов данных в Python**.

  ---

  Попробуем написать простую функцию, которая принимает на вход возраст ребёнка и определяет, младенец ли он. Младенцами считаются дети до года:

  ```python
  def is_infant(age):
      return age < 1
  ```

  Пользуемся тем фактом, что любая операция — это выражение, поэтому единственной строчкой функции пишем «вернуть то значение, которое получится в результате сравнения `age < 1`».

  В зависимости от пришедшего аргумента, сравнение будет либо истинным (`True`), либо ложным (`False`), а `return` вернёт этот результат.

  Вызовем функцию и выведем на экран результат:

  ```python
  def is_infant(age):
      return age < 1

  print(is_infant(3))
  ```

  <pre class='hexlet-basics-output'>False</pre>

  А теперь проверим ребенка, которому полгода:

  ```python
  print(is_infant(0.5))
  ```

  <pre class='hexlet-basics-output'>True</pre>


instructions: |

  Напишите функцию `is_pensioner`, которая принимает возраст в качестве единственного аргумента и проверяет, является ли этот возраст пенсионным. Пенсионным считается возраст 60 лет и больше.

  Примеры вызова:

  ```python
  is_pensioner(75) # True
  is_pensioner(18) # False
  ```

definitions:
  - name: "Логический тип (bool)"
    description: "тип данных с двумя возможными значениями: `True` (истина) и `False` (ложь)."
