---

name: Предикаты
theory: |

  Вспомним функцию `is_infant` из прошлого урока:

  ```python
  def is_infant(age):
      return age < 1

  print(is_infant(3))
  ```

  <pre class='hexlet-basics-output'>False</pre>

  `is_infant` — это функция-предикат.

  **Предикат отвечает на утвердительный вопрос «да» или «нет», возвращая значение типа bool.**

  Предикаты во всех языках принято именовать особым образом для простоты анализа. В Python предикаты, как правило, начинаются с префикса `is` или `has`:

    * `is_infant` — «младенец ли?»
    * `has_children` — «есть ли дети?»
    * `is_empty` — «пустой ли?»
    * `has_errors` — «есть ли ошибки?»

  Функция может считаться предикатом, **только** если она возвращает `bool`.

  ---

  Давайте напишем еще одну функцию-предикат. Она принимает строку и проверяет, является ли она словом `'Castle'`:

  ```python
  def is_castle(string):
      return string == 'Castle'

  print(is_castle('Sea'))
  ```

  <pre class='hexlet-basics-output'>False</pre>


instructions: |

  Напишите функцию `is_mister`, которая принимает строку и проверяет, является ли она словом `'Mister'`.

  ```python
  is_mister('Mister') # True
  is_mister('Missis') # False
  ```

tips:
  - |
    [Именование в программировании](https://ru.hexlet.io/blog/posts/naming-in-programming)

definitions:
  - name: "Предикат"
    description: "выражение, отвечающее на вопрос «да» или «нет» с помощью типа bool."
