---

name: Логические операторы
theory: |

  Мы уже умеем писать функции, которые проверяют одиночные условия. Теперь научимся строить **составные** условия.

  Хороший пример: проверка пароля. Как вы знаете, некоторые сайты при регистрации требуют пароль от 8 до 20 символов в длину. Честно говоря, это странное ограничение, но что поделать.

  В математике мы бы написали `8 < x < 20`, но во многих языках программирования так сделать нельзя. К счастью, Python такие составные условия писать позволяет. И всё же на минутку мы забудем о такой возможности. Попробуем сделать два отдельных логических выражения и соединить их специальным оператором «И»:

  ##### Пароль длиннее 8 символов **И** пароль короче 20 символов.

  Вот функция, которая принимает пароль и говорит, соответствует ли он условиям (`True`) или не соответствует (`False`):

  ```python
  def is_correct_password(password):
      length = len(password)
      return length > 8 and length < 20

  print(is_correct_password('qwerty'))                   # => False
  print(is_correct_password('qwerty1234'))               # => True
  print(is_correct_password('zxcvbnmasdfghjkqwertyui'))  # => False
  ```

  `and` — означает «И» (в математической логике это называют конъюнкцией). Всё выражение считается истинным, только если истинен каждый операнд — каждое из составных выражений. Иными словами, `and` означает «и то, и другое».

  Приоритет этого оператора ниже, чем приоритет операторов сравнения, поэтому выражение `length > 8 and length < 20` отрабатывает правильно без скобок.

  Кроме `and` часто используется оператор `or` — «ИЛИ» (дизъюнкция). Он означает «или то, или другое, или оба». То есть выражение `a or b` считается истинным, если хотя бы один из операндов (a или b или одновременно все операнды) является истинным. Иначе выражение ложное.

  Операторы можно комбинировать в любом количестве и любой последовательности, но когда одновременно встречаются `and` и `or`, то приоритет лучше задавать скобками.

  ---

  Другой пример. Мы хотим купить квартиру, которая удовлетворяет условиям: площадь от 100 кв. метров и больше на любой улице **ИЛИ** площадь от 80 кв. метров и больше, но на центральной улице `Main Street`.

  Напишем функцию, проверяющую квартиру. Она принимает два аргумента: площадь (число) и название улицы (строку):

  ```python
  def is_good_apartment(area, street):
      return area >= 100 or (area >= 80 and street == 'Main Street')

  print(is_good_apartment(91, 'Queens Street'))  # => False
  print(is_good_apartment(78, 'Queens Street'))  # => False
  print(is_good_apartment(70, 'Main Street'))    # => False

  print(is_good_apartment(120, 'Queens Street'))  # => True
  print(is_good_apartment(120, 'Main Street'))    # => True
  print(is_good_apartment(80, 'Main Street'))     # => True
  ```

  Область математики, в которой изучаются логические операторы, называется булевой алгеброй. Ниже показаны «таблицы истинности» — по ним можно определить, каким будет результат применения оператора:

  #### И `and`

  | A     | B     | A and B  |
  | ----- | ----- | -------  |
  | TRUE  | TRUE  | **TRUE** |
  | TRUE  | FALSE | FALSE    |
  | FALSE | TRUE  | FALSE    |
  | FALSE | FALSE | FALSE    |


  #### ИЛИ `or`

  | A     | B     | A or B   |
  | ----- | ----- | -------- |
  | TRUE  | TRUE  | **TRUE** |
  | TRUE  | FALSE | **TRUE** |
  | FALSE | TRUE  | **TRUE** |
  | FALSE | FALSE | FALSE    |

instructions: |

  Джон поручил Сэму реализовать автоматическое распознавание солдат Ланнистеров на видео. Идея автоматизировать дозор крепости казалась ему привлекательной. В процессе работы Сэму понадобилось написать функцию, которая определяет, Ланнистер ли перед ним или нет. Немного подумав, Сэм выделил следующие правила определения Ланнистера:

  ---

  Если у солдата доспехи красного цвета **И** нет щита

  **ИЛИ**

  если у солдата есть щит с изображением льва

  **то это Ланнистер**.

  ---

  ![](https://i.imgur.com/x08CIAC.jpg)

  Напишите функцию `is_lannister_soldier`, которая принимает на вход два аргумента:

  1. Цвет доспехов (строка). Если доспехи красные, то строка `red`.
  2. `None`, если щита нет. Строка `lion`, если щит есть, и на нём изображен лев.

  Функция возвращает `True`, если распознан Ланнистер, и `False`, если не распознан.

  Примеры вызова:

  ```python
  is_lannister_soldier('red', 'man')   # False
  is_lannister_soldier('blue', 'lion') # True
  ```

tips:
  - |
    [Булева алгебра](https://ru.wikipedia.org/wiki/Булева_алгебра)
  - |
    [Конъюнкция](https://ru.wikipedia.org/wiki/Конъюнкция)
  - |
    [Дизъюнкция](https://ru.wikipedia.org/wiki/Дизъюнкция)

definitions:
  - name: "Логические операторы"
    description: "операторы «И» (`and`), ИЛИ (`or`), позволяющие создавать составные логические условия."
