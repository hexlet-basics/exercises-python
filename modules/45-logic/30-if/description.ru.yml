---

name: Условная конструкция
theory: |

  #### Вкратце

  ```python
  if условие:
      # код, который будет выполнен,
      # если условие истинно
  ```

  ---

  Задача предиката — получить ответ на вопрос. Но обычно этого не достаточно и нужно выполнить опредёленное действие в зависимости от ответа.

  Напишем функцию, которая определяет тип переданного предложения. Для начала она будет отличать обычные предложения от вопросительных.

  ```python
  def get_type_of_sentence(sentence):
      last_char = sentence[-1]  # простой способ извлечь последний символ
      if last_char == '?':
          return 'question'
      return 'normal'

  print(get_type_of_sentence('Hodor'))   # => normal
  print(get_type_of_sentence('Hodor?'))  # => question
  ```

  `if` — инструкция. В неё всегда передаётся выражение-предикат, а затем описывается блок кода (помним — блок описывается с отступом). Этот **блок кода будет выполнен, только если выражение-предикат — истина**.

  Если предикат — ложь, то этот блок кода пропускается, и интерпретатор продолжит выполнять программу дальше.

  В нашем случае следующая строчка кода — `return 'normal'` — заставит функцию вернуть строку и завершиться.

  Как видите, `return` может находиться где угодно в функции. В том числе внутри блока кода с условием.

instructions: |

  Реализуйте функцию `guess_number`, которая принимает число и проверяет, равно ли число заданному (пусть это будет 42). Если равно, то функция должна вернуть строку `'You win!'`, в противном случае нужно вернуть строку `'Try again!'`.

  Примеры вызова:

  ```python
  guess_number(42) # 'You win!'
  guess_number(61) # 'Try again!'
  ```

tips: []

definitions:
  - name: "Условная конструкция"
    description: "способ задать условие для выполнения кода. Например, `if x > 10: ... `"
