---

name: Формирование строк в циклах
theory: |

  Ещё одно использование циклов – формирование строк. Подобная задача нередко встречается в веб-программировании. Она сводится к обычной агрегации с применением интерполяции или конкатенации.

  Переворот строки (запись её задом-наперёд) — простейшая алгоритмическая задача, которую иногда задают на собеседованиях. Правильный способ перевернуть строку — использовать функцию из стандартной библиотеки. Но в целях обучения полезно реализовать её самостоятельно.

  Один из алгоритмов выглядит так: строим новую строку, перебирая символы исходной строки в обратном порядке.

  ```python
  def reverse_string(string):
      index = len(string) - 1
      reversed_string = ''

      while index >= 0:
          current_char = string[index]
          reversed_string = reversed_string + current_char
          # То же самое через интерполяцию
          # reversed_string = "{}{}".format(reversed_string, current_char)
          index = index - 1

      return reversed_string

  reverse_string('Game Of Thrones'))  # 'senorhT fO emaG'
  # Проверка нейтрального элемента
  reverse_string('')  # ''
  ```

  Разберём функцию построчно:

  * `index = len(string) - 1` — записываем в новую переменную индекс последнего символа строки (напомним, что индексы начинаются с нуля).
  * `reversed_string = ''` — инициализируем строку, куда будем записывать результат.
  * `while index >= 0:` — условие: повторяем тело цикла, пока текущий индекс не дошёл до `0`, то есть до первого символа.
  * `current_char = string[index]` — берём из строки символ по текущему индексу.
  * `reversed_string = reversed_string + current_char` — записываем в строку-результат новое значение: текущая строка-результат + новый символ.
  * `index = index - 1` — обновляем счётчик
  * `return reversed_string` — когда цикл завершился, возвращаем строку-результат.

  Обязательно скопируйте эту функцию в [https://repl.it/languages/python3](https://repl.it/languages/python3) и поэкспериментируйте с ней.

  Работая со строками, программисты часто допускают ошибку «выход за границы строки». При неправильном подборе начального значения счётчика или ошибке в предикате цикла может получиться ситуация, при которой идёт обращение к несуществующему символу.

  Особенно часто забывают о том, что индекс последнего элемента всегда меньше на единицу размера строки. В строках начальный индекс равен `0`, а значит индекс последнего элемента — `len(str) - 1` (длина минус 1).

instructions: |

  Реализуйте функцию `my_substr()`, которая извлекает из строки подстроку указанной длины. Она принимает на вход два аргумента: строку и длину, и возвращает подстроку, начиная с первого символа:

  Пример вызова:

  ```python
  string = 'If I look back I am lost'
  print(my_substr(string, 1))  # => 'I'
  print(my_substr(string, 7))  # => 'If I lo'
  ```

  Используйте тот же подход, что в функции для переворота строки из урока: собирайте строку-результат в цикле, перебирая начальную строку до определённого момента.

tips: []
